get_cards_by_name <- function(
q           = "Jace, the Mind Sculptor",
search_type = "exact",
set         = "",
format      = "json",
face        = "front",
version     = "large",
pretty      = FALSE
){
# Checks
attempt::stop_if(q, is.null, "You must specify a query")
attempt::stop_if_not(search_type, is.character, "`search_type` must be of type character")
stop_if_not_in(search_type, c('exact', 'fuzy'), "`search_type` must be one of c('exact', 'fuzy')")
attempt::stop_if_not(set, is.character, "`set`  must be of type character")
stop_if_not_in(format, c('json', 'csv', 'image'), "`format` must be one of c('json', 'csv', 'image')")
attempt::stop_if_not(version, is.character, "`version` must be of type character")
stop_if_not_in(version, c('small', 'normal', 'large', 'png', 'art_crop', 'border_crop'),
"`version` must be one of c('small', 'normal', 'large', 'png', 'art_crop', 'border_crop')")
attempt::stop_if_not(pretty, is.logical, "`pretty` must be either TRUE or FALSE")
check_internet()
pretty_search <- ifelse(pretty, "true", "false")
}
get_cards_by_name(type = 2)
get_cards_by_name(search_type = 2)
get_cards_by_name(search_type = "2")
get_cards_by_name(format = "2")
library(ScyfallR)
get_cards_by_name(search_type = "2")
roxygen2::roxygenize()
library(ScyfallR)
get_cards_by_name(search_type = "2")
library(ScyfallR)
get_cards_by_name(search_type = "2")
roxygen2::roxygenize()
library(ScyfallR)
ScryfallR
ScyfallR::get_cards_by_name(format = "2")
get_cards_by_search
get_cards_by_search()
library(ScyfallR)
library(ScyfallR)
get_cards_by_search()
get_cards_by_search()->test
View(test)
library(ScyfallR)
get_cards_by_search()->test
test$data
test$data->test2
View(test2)
get_cards_by_search(format = image)->test
get_cards_by_name <- function(
q           = "Jace, the Mind Sculptor",
search_type = "exact",
set         = "",
format      = "json",
face        = "front",
version     = "large",
pretty      = FALSE
){
# Checks
attempt::stop_if(q, is.null, "You must specify a query")
attempt::stop_if_not(search_type, is.character, "`search_type` must be of type character")
stop_if_not_in(search_type, c('exact', 'fuzy'), "`search_type` must be one of c('exact', 'fuzy')")
attempt::stop_if_not(set, is.character, "`set`  must be of type character")
stop_if_not_in(format, c('json', 'csv', 'image'), "`format` must be one of c('json', 'csv', 'image')")
attempt::stop_if_not(face, is.character, "`face` must be of type character")
stop_if_not_in(face, c('front', 'back'), "`version` must be one of c('front', 'back')")
attempt::stop_if_not(version, is.character, "`version` must be of type character")
stop_if_not_in(version, c('small', 'normal', 'large', 'png', 'art_crop', 'border_crop'),
"`version` must be one of c('small', 'normal', 'large', 'png', 'art_crop', 'border_crop')")
attempt::stop_if_not(pretty, is.logical, "`pretty` must be either TRUE or FALSE")
check_internet()
# Convert to proper formatting
pretty_search <- ifelse(pretty, "true", "false")
if(search_type == "exact"){
res <- httr::GET(paste0(card_url, "/searched"),
query = list(
exact   = q,
set     = set,
format  = format,
face    = face,
version = version,
pretty  = pretty_search
)
)
}
else if(exact == "fuzy"){
res <- httr::GET(paste0(card_url, "/searched"),
query = list(
fuzy    = q,
set     = set,
format  = format,
face    = face,
version = version,
pretty  = pretty_search
)
)
}
else{
usethis::ui_stop("There was an issue with the search type it should be either 'json' or 'csv'")
}
if(format == "json"){
return(jsonlite::fromJSON(rawToChar(res$content)))
}
else if (format == "csv"){
return(readr::read_csv(rawToChar(res$content)))
}
else if (format == "image"){
return(magick::image_read(res$content))
}
else{
usethis::ui_stop("There was an issue with the format. it should be either 'json', 'csv', or 'image")
}
}
library(ScyfallR)
get_cards_by_search(format = "image")->test
get_cards_by_name(format = "image")->test
library(ScyfallR)
get_cards_by_name(format = "image")->test
get_cards_by_name(format = "image")->test
library(ScyfallR)
get_cards_by_name(format = "image")->test
test
get_cards_by_name(format = "image", search_type = "fuzy")->test
test
library(ScyfallR)
get_cards_by_name(format = "image", search_type = "fuzy")->test
library(ScyfallR)
get_cards_by_name(format = "image", search_type = "fuzy")->test
test
get_cards_by_name(format = "image", search_type = "fuzy")->test
library(ScyfallR)
test
?i
?I
library(ScyfallR)
get_cards_by_name(format = "image", search_type = "fuzy")->test
test
library(ScyfallR)
get_cards_by_name(format = "image", search_type = "fuzy")->test
get_cards_by_name(format = "image", search_type = "fuzzy")->test
test
library(ScyfallR)
get_cards_by_name(format = "image", search_type = "fuzzy")->test
test
library(ScyfallR)
get_cards_by_name(format = "image", search_type = "fuzzy")->test
test
get_cards_by_name(format = "image", search_type = "fuzzy", set = "zen")->test
get_cards_by_name(format = "image", search_type = "fuzzy", set = "WWK")->test
test
library(ScyfallR)
use_package("usethis")
library(devtools)
library(usethis)
library(desc)
use_package("usethis")
use_package("magick")
use_package("readr")
roxygen2::roc_proc_text()
roxygen2::roxygenize()
